{"version":3,"sources":["components/Account/AccountInfo.tsx","utils/numbers.ts","components/Contract/ContractInfo.tsx","services/web3/core.ts","services/web3/abis/index.ts","services/web3/addresses/index.ts","services/web3/mia.ts","components/Transfer/index.tsx","components/TransferOwnership/index.tsx","components/Burn/index.tsx","containers/Home/index.tsx","containers/AppRouter.tsx","containers/App.tsx","reportWebVitals.ts","index.tsx"],"names":["AccountInfo","props","Typography","variant","address","Button","number","balance","toLocaleString","ContractInfo","Web3","_config","_client","provider","signer","ens","this","setProvider","undefined","setENS","providers","JsonRpcProvider","Web3Provider","setSigner","utils","getAddress","Signer","isSigner","Error","getSigner","abi","ethers","Contract","bytecode","factory","ContractFactory","args","deploy","contract","method","getContract","funcs","Object","keys","interface","functions","parsedArgs","JSON","parse","res","toString","tx","wait","transactionHash","domain","ensAddress","ensAbi","resolverAbi","ensContract","domainNode","namehash","resolver","resolverAddress","resolverContract","contenthash","hash","content","substring","isHexString","Base58","encode","hexDataSlice","selectedAddress","chainId","Number","isValidName","indexOf","MIA_TOKEN_V1_ABI","MIA_TOKEN_V0","MIA_TOKEN_V1","MIA_TOKEN_ADMIN_ABI","MIA_TOKEN_ADMIN","MIA_TOKEN_PROXY","RINKEBY_MIA_TOKEN_PROXY","rinkeby","MIA_PROXY_ADMIN","RINKEBY_MIA_PROXY_ADMIN","window","ethereum","MIA","_web3","_contractAdmin","_contractProxy","web3","enable","networkId","getNetwork","contractAdmin","contractProxyV1","alert","amount","newOwner","console","log","transferOwnership","burn","_instance","instance","initialize","Transfer","useState","sendAddress","setSendAddress","sendAmount","setSendAmount","onSubmit","event","a","preventDefault","getInstance","mia","sendMIAToken","printContract","TextField","label","placeholder","type","onChange","target","value","color","disabled","length","slice","onClick","TransferOwnership","setNewOwner","transferOwnershipOfProxyAdmin","Burn","burnAmount","setBurnAmount","Home","setAddress","miaContractAddress","setMiaContractAddress","getMia","userAddress","contractAddress","useEffect","className","Chip","AppRouter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08dfb3d0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Typography, Button } from '@material-ui/core';\n\nimport { thousandsSeparator } from \"utils\";\n\ninterface AccountInfo {\n  balance: number\n  address: string\n}\n\nfunction AccountInfo(props: AccountInfo) {\n  return (\n    <>\n      <p>\n        <Typography variant=\"caption\">\n          Address: { props.address }\n        </Typography>\n      </p>\n      <p>\n      <Button variant=\"outlined\">\n        <Typography variant=\"caption\">Balance: { thousandsSeparator(props.balance) } MIA</Typography>\n      </Button>\n      </p>\n    </>\n  );\n}\n\nexport default AccountInfo;\n","export const thousandsSeparator = (number:number): string => { \n  return number.toLocaleString()\n}","import React from \"react\";\nimport { Typography } from '@material-ui/core';\n\ninterface ContractInfo {\n  address: string\n}\n\nfunction ContractInfo(props: ContractInfo) {\n  return (\n    <>\n      <p>\n        <Typography variant=\"caption\">\n          MIA Contract Address: { props.address }\n        </Typography>\n      </p>\n    </>\n  );\n}\n\nexport default ContractInfo;\n","import { Signer, ethers, providers, utils } from \"ethers\";\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Base58 } from \"@ethersproject/basex\";\n\ntype Address = string;\ntype AccountIndex = number;\n\nexport type EthereumSigner = Signer | Address | AccountIndex;\nexport type EthereumProvider = string | providers.ExternalProvider;\nexport type EthereumClient = providers.JsonRpcProvider | providers.Web3Provider;\n\nexport interface IEthereumConfig {\n  provider: EthereumProvider;\n  signer?: EthereumSigner;\n  ens?: Address;\n}\n\nexport class Web3 {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore: initialized within setProvider\n  private _client: EthereumClient;\n\n  constructor(private _config: IEthereumConfig) {\n    const { provider, signer, ens } = _config;\n\n    // Sanitize Provider & Signer\n    this.setProvider(provider, signer !== undefined ? signer : 0);\n\n    // Sanitize ENS address\n    if (ens) {\n      this.setENS(ens);\n    }\n  }\n\n  public static isENSDomain(domain: string): boolean {\n    return utils.isValidName(domain) && domain.indexOf(\".eth\") !== -1;\n  }\n\n  public setProvider(provider: EthereumProvider, signer?: EthereumSigner): void {\n    this._config.provider = provider;\n\n    if (typeof provider === \"string\") {\n      this._client = new providers.JsonRpcProvider(provider);\n    } else {\n      this._client = new providers.Web3Provider(provider);\n    }\n\n    if (signer !== undefined) {\n      this.setSigner(signer);\n    }\n  }\n\n  public setSigner(signer: EthereumSigner): void {\n    if (typeof signer === \"string\") {\n      this._config.signer = utils.getAddress(signer);\n    } else if (Signer.isSigner(signer)) {\n      this._config.signer = signer;\n\n      if (signer.provider !== this._config.provider) {\n        throw Error(\n          `Signer's connected provider does not match the config's ` +\n            `provider. Please call \"setProvider(...)\" before calling ` +\n            `\"setSigner(...)\" if a different provider is desired.`\n        );\n      }\n    } else {\n      this._config.signer = signer;\n    }\n  }\n\n  public setENS(ens: Address): void {\n    this._config.ens = utils.getAddress(ens);\n  }\n\n  public getSigner(): ethers.Signer {\n    const { signer } = this._config;\n\n    if (this._config.signer === undefined) {\n      throw Error(\"Signer is undefined, this should never happen.\");\n    }\n\n    if (typeof signer === \"string\" || typeof signer === \"number\") {\n      return this._client.getSigner(signer);\n    } else if (Signer.isSigner(signer)) {\n      return signer;\n    } else {\n      throw Error(`Signer is an unrecognized type, this should never happen. \\n${signer}`);\n    }\n  }\n\n  public getContract(address: Address, abi: any): ethers.Contract {\n    return new ethers.Contract(address, abi, this.getSigner());\n  }\n\n  public async deployContract(abi: ethers.ContractInterface, bytecode: string, ...args: unknown[]): Promise<Address> {\n    const signer = this.getSigner();\n    const factory = new ethers.ContractFactory(abi, bytecode, signer);\n    const contract = await factory.deploy(...args);\n    return contract.address;\n  }\n\n  public async callView(address: Address, method: string, args: string): Promise<string> {\n    const contract = this.getContract(address, [method]);\n    const funcs = Object.keys(contract.interface.functions);\n    if (args[0] !== \"[\") {\n      args = `[${args}]`;\n    }\n    const parsedArgs = JSON.parse(args);\n    const res = await contract[funcs[0]](...parsedArgs);\n    return res.toString();\n  }\n\n  public async sendTransaction(address: Address, method: string, args: string): Promise<string> {\n    const contract = this.getContract(address, [method]);\n    const funcs = Object.keys(contract.interface.functions);\n    if (args[0] !== \"[\") {\n      args = `[${args}]`;\n    }\n    const parsedArgs = JSON.parse(args);\n    const tx = await contract[funcs[0]](...parsedArgs);\n    const res = await tx.wait();\n    // TODO: improve this\n    return res.transactionHash;\n  }\n\n  public async ensToCID(domain: string): Promise<string> {\n    const ensAddress = this._config.ens || \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n    const ensAbi = [\"function resolver(bytes32 node) external view returns (address)\"];\n    const resolverAbi = [\n      \"function contenthash(bytes32 nodehash) view returns (bytes)\",\n      \"function content(bytes32 nodehash) view returns (bytes32)\",\n    ];\n    const ensContract = this.getContract(ensAddress, ensAbi);\n    const domainNode = ethers.utils.namehash(domain);\n\n    // Get the node's resolver address\n    const resolverAddress = await ensContract.resolver(domainNode);\n\n    const resolverContract = this.getContract(resolverAddress, resolverAbi);\n\n    // Get the CID stored at this domain\n    let hash;\n    try {\n      hash = await resolverContract.contenthash(domainNode);\n    } catch (e) {\n      try {\n        // Fallback, contenthash doesn't exist, try content\n        hash = await resolverContract.content(domainNode);\n      } catch (err) {\n        // The resolver contract is unknown...\n        throw Error(`Incompatible resolver ABI at address ${resolverAddress}`);\n      }\n    }\n\n    if (hash === \"0x\") {\n      return \"\";\n    }\n\n    if (hash.substring(0, 10) === \"0xe3010170\" && ethers.utils.isHexString(hash, 38)) {\n      return Base58.encode(ethers.utils.hexDataSlice(hash, 4));\n    } else {\n      throw Error(`Unkown CID format, CID hash: ${hash}`);\n    }\n  }\n  \n  public getAddress(): string {\n    const { selectedAddress: address } = this._config.provider as any\n    return address;\n  }\n  \n  public getNetwork(): number {\n    const { chainId } = this._config.provider as any;\n    return Number(chainId);\n  }\n}\n","import MIA_TOKEN_V0 from \"services/web3/abis/MIATokenV0.json\";\nimport MIA_TOKEN_V1 from \"services/web3/abis/MIATokenV1.json\";\nimport MIA_TOKEN_ADMIN from \"services/web3/abis/MIATokenProxyAdmin.json\"\nimport MIA_TOKEN_PROXY from \"services/web3/abis/MIATokenProxy.json\"\n\n\nconst MIA_TOKEN_V0_ABI = MIA_TOKEN_V0.abi;\n\nconst MIA_TOKEN_V1_ABI = MIA_TOKEN_V1.abi\n\nconst MIA_TOKEN_ADMIN_ABI = MIA_TOKEN_ADMIN.abi\n\nconst MIA_TOKEN_PROXY_ABI = MIA_TOKEN_PROXY.abi\n\nexport {\n  MIA_TOKEN_V0_ABI,\n  MIA_TOKEN_V1_ABI,\n  MIA_TOKEN_ADMIN_ABI,\n  MIA_TOKEN_PROXY_ABI,\n}","import MIA_TOKEN_V0 from \"services/web3/addresses/rinkeby-MIATokenV0-address.json\";\nimport MIA_TOKEN_V1 from \"services/web3/addresses/rinkeby-MIATokenV1-address.json\";\nimport MIA_PROXY_ADMIN from \"services/web3/addresses/rinkeby-MIAProxyAdmin-address.json\"\nimport MIA_TOKEN_PROXY from \"services/web3/addresses/rinkeby-MIATokenProxy-address.json\";\n\nexport const RINKEBY_MIA_TOKEN_V0 = MIA_TOKEN_V0.rinkeby;\nexport const RINKEBY_MIA_TOKEN_V1 = MIA_TOKEN_V1.rinkeby;\nexport const RINKEBY_MIA_TOKEN_PROXY = MIA_PROXY_ADMIN.rinkeby;\nexport const RINKEBY_MIA_PROXY_ADMIN = MIA_TOKEN_PROXY.rinkeby;","import { Web3 } from \"services/web3\";\n\nimport { \n  // MIA_TOKEN_V0_ABI,\n  MIA_TOKEN_V1_ABI,\n  // MIA_TOKEN_ADMIN_ABI,\n  MIA_TOKEN_ADMIN_ABI,\n  // MIA_TOKEN_PROXY_ABI,\n} from \"services/web3/abis\"\nimport { \n  // RINKEBY_MIA_TOKEN_V0,\n  RINKEBY_MIA_TOKEN_V1,\n  RINKEBY_MIA_TOKEN_PROXY,\n  // RINKEBY_MIA_PROXY_ADMIN\n  RINKEBY_MIA_PROXY_ADMIN,\n} from \"services/web3/addresses\";\n\nconst provider = (window as any).ethereum\n\nclass MIA {\n  private static _instance: MIA | undefined\n  private _web3: Web3 | undefined\n  private _contractAdmin: any;\n  private _contractProxy: any;\n  private constructor() {\n    \n  }\n  \n  private async initialize() {\n    const web3 = new Web3({ provider });\n    await provider.enable()\n    const networkId = web3.getNetwork();\n    if(networkId === 0x4 || networkId === 4) {            \n      const contractAdmin = web3.getContract(RINKEBY_MIA_PROXY_ADMIN, MIA_TOKEN_ADMIN_ABI);\n      const contractProxyV1 = web3.getContract(RINKEBY_MIA_TOKEN_PROXY, MIA_TOKEN_V1_ABI);\n      this._web3 = web3\n      this._contractAdmin = contractAdmin;\n      this._contractProxy = contractProxyV1;\n    } else {\n      alert(\"SWITCH METAMASK NETWORK TO RINKEBY\");\n    }\n  }\n  \n  public async contractAddress () {\n    return await this._contractAdmin.address;\n  }\n  \n  public async userAddress() {\n    return this._web3?.getAddress();\n  }\n  \n  public async userBalance() {\n\n  }\n\n  public static async getInstance() {\n    if (!this._instance) {\n      try {\n        const instance = new MIA();\n        await instance.initialize();\n        this._instance = instance;\n      } catch (error) {\n        console.log('error in getInstance()', error);\n      }\n    }\n    return this._instance;\n  }\n  \n  public async sendMIAToken(address: string, amount: number) {\n\n  }\n  \n  public async printContract () {    \n    try {\n      \n    } catch (error) {\n      console.log(\"Error Minting v0 token\", error);\n    }\n  }\n  \n  public async transferOwnershipOfProxyAdmin(newOwner: string) {\n    console.log(\"transferOwnershipOfProxyAdmin\");\n    console.log(await this._contractAdmin);\n    await this._contractAdmin.transferOwnership(newOwner);\n    try {\n      \n    } catch (error) {\n      console.log(\"Error transfer ownership of admin\", error);\n    }\n  }\n  \n  public async burn(amount: number) {\n    console.log(\"burn\");\n    console.log(await this._contractProxy);\n    await this._contractProxy.burn(amount);\n    try {\n      \n    } catch (error) {\n      console.log(\"Error Burn v1 token\", error);\n    }\n  }\n  \n  \n\n}\n\nexport default MIA;","import React, { useState } from \"react\";\nimport { Typography, TextField, Button } from '@material-ui/core';\n\nimport { MIA } from \"services/web3\";\n\ntype BigNumberish = number;\ntype BytesLike = Buffer;\n\nexport type TransactionRequest = {\n    to?: string,\n    from?: string,\n    nonce?: BigNumberish,\n\n    gasLimit?: BigNumberish,\n    gasPrice?: BigNumberish,\n\n    data?: BytesLike,\n    value?: BigNumberish,\n    chainId?: number\n}\nfunction Transfer(props: any){\n  const [sendAddress, setSendAddress] = useState<string>(\"0x5db06acd673531218b10430ba6de9b69913ad545\");\n  const [sendAmount, setSendAmount] = useState<number>(1);\n\n  const onSubmit = async (event: any) => {\n    event.preventDefault();\n    const mia = await MIA.getInstance();\n    await mia?.sendMIAToken(sendAddress, sendAmount);\n  }\n\n  const onAddressChange = (event: any) => {\n    console.log('onAddressChange event.target.value', event.target.value);\n    const { value } = event.target;\n    setSendAddress(value);\n  }\n\n  const onAmountChange = (event: any) => {\n    console.log('onAmountChange event', event.target.value);\n    const { value } = event.target;\n    setSendAmount(value);\n  }\n  \n  const printContract = async () => {\n    const mia = await MIA.getInstance();\n    await mia?.printContract();\n  }\n  \n  return (\n    <>\n      <form onSubmit={onSubmit}>\n          <TextField label=\"Address to transfer\" variant=\"outlined\" placeholder=\"Address\" type=\"text\" onChange={onAddressChange}/>\n          <TextField label=\"Amount to transfer\" variant=\"outlined\" placeholder=\"Amount\" type=\"number\" onChange={onAmountChange}/>\n          <div>\n            <br></br>\n            <Button color= \"primary\" variant=\"contained\" disabled={!(sendAddress.length > 42 && sendAddress.slice(0,2) === \"0x\") && false}>Transfer</Button>\n          </div>\n      </form>\n      <br></br>\n      <Button color= \"primary\" variant=\"contained\" onClick={printContract}>Print Contract</Button>\n      <Typography variant=\"caption\">Transfer {sendAmount} MIA Token to { sendAddress }</Typography>\n    </>\n  )\n}\n\nexport default Transfer;\n","import React, { useState } from \"react\";\nimport { Typography, TextField, Button } from '@material-ui/core';\n\nimport { MIA } from \"services/web3\";\n\nconst agentAddress = \"0x32085406ee42a06d2a284f5adf020053c81111a3\";\n\nfunction TransferOwnership(props: any){\n  const [newOwner, setNewOwner] = useState<string>(agentAddress);\n\n  const onSubmit = async (event: any) => {\n    event.preventDefault();\n    const mia = await MIA.getInstance();\n    await mia?.transferOwnershipOfProxyAdmin(newOwner);\n  }\n\n  const onAddressChange = (event: any) => {\n    console.log('onAddressChange event.target.value', event.target.value);\n    const { value } = event.target;\n    setNewOwner(value);\n  }\n  \n  return (\n    <>\n      <form onSubmit={onSubmit}>\n          <TextField label=\"new owner address\" variant=\"outlined\" placeholder=\"New Owner Address\" type=\"text\" onChange={onAddressChange} value={newOwner}/>\n          <div>\n            <br></br>\n            <Button color= \"primary\" variant=\"contained\" disabled={!(newOwner.length === 42 && newOwner.slice(0,2) === \"0x\")} type=\"submit\">Transfer Ownership</Button>\n          </div>\n      </form>\n      <br></br>\n      <Typography variant=\"caption\">Transfer to New Owner: { newOwner }</Typography>\n    </>\n  )\n}\n\nexport default TransferOwnership;\n","import React, { useState } from \"react\";\nimport { Typography, TextField, Button } from '@material-ui/core';\n\nimport { MIA } from \"services/web3\";\n\nfunction Burn(props: any){\n  // const [sendAddress, setSendAddress] = useState<string>(\"0x5db06acd673531218b10430ba6de9b69913ad545\");\n  const [burnAmount, setBurnAmount] = useState<number>(1500*1000);\n\n  const onSubmit = async (event: any) => {\n    event.preventDefault();\n    const mia = await MIA.getInstance();\n    await mia?.burn(burnAmount);\n  }\n\n\n  const onAmountChange = (event: any) => {\n    console.log('Burn onAmountChange event', event.target.value);\n    const { value } = event.target;\n    setBurnAmount(value);\n  }\n  \n  \n  return (\n    <>\n      <form onSubmit={onSubmit}>\n          <TextField label=\"Amount to burn\" variant=\"outlined\" placeholder=\"Amount\" type=\"number\" onChange={onAmountChange} value={burnAmount}/>\n          <div>\n            <br></br>\n            <Button color= \"primary\" variant=\"contained\" type=\"submit\">Burn</Button>\n          </div>\n      </form>\n      <br></br>\n      <Typography variant=\"caption\">Burn {burnAmount} of MIA Token</Typography>\n    </>\n  )\n}\n\nexport default Burn;","import React, { useState, useEffect } from 'react';\nimport { Chip } from '@material-ui/core';\n\nimport {\n  AccountInfo,\n  ContractInfo,\n  Transfer,\n  TransferOwnership,\n  Burn,\n} from \"components\";\n\nimport MIA from \"services/web3/mia\";\n\nfunction Home() {\n  const [balance, setBalance] = useState<number>(0);\n  const [address, setAddress] = useState<string>(\"\");\n  const [miaContractAddress, setMiaContractAddress] = useState<string>(\"\");\n\n  const componentDidMount = () => {\n    getMia();\n  }\n\n  const getMia = async () => {\n    const mia: any = await MIA.getInstance();\n    const address = await mia.userAddress();\n    const contractAddress = await mia.contractAddress();\n    // let balance = await mia.userBalance();\n    // balance = balance.div(1e6).toNumber();\n    setAddress(address);\n    // setBalance(balance);\n    setMiaContractAddress(contractAddress);\n  }\n\n  useEffect(componentDidMount, []);\n\n  return (\n    <div className=\"Home\">\n        <Chip\n          label=\"MIA TOKEN TESTER UI\"\n          color=\"primary\"\n        />\n        <ContractInfo address={miaContractAddress} />\n        <AccountInfo balance={balance} address={address}/>\n        <Transfer />\n        <TransferOwnership />\n        <Burn />\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\n\nimport { Home } from \"containers\";\n\nfunction AppRouter() {\n\n  return (\n    <div className=\"AppRouter\">\n      <Home />\n    </div>\n  );\n}\n\nexport default AppRouter;","import React from 'react';\n// import logo from \"logo.svg\";\n\nimport { AppRouter } from \"containers\";\n\nimport 'styles/App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      {/* \n        <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      */}\n      <AppRouter />\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}